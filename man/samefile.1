.TH SAMEFILE 1 "14 APRIL 2009" "" SAMESAME
.\"
.\" To format this file into a text file say
.\"
.\"    nroff -man samefile.1              or
.\"    groff -mandoc -Tascii samefile.1
.\"
.\" Copyright (c) 1996 Jens Schweikhardt.  All rights reserved.
.\" Copyright (c) 2009 Alex de Kruijff.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

.SH NAME
\fBsamefile\fP - find identical files

\fBsamearchive\fP - find identical files, while keeping archives intact
.SH SYNOPSIS

\fBsamefile\fP [\fB-a\fP | \fB-A\fP | \fB-At\fP | \fB-L\fP | \fB-Z\fP |
| \fB-Zt\fP] [\fB-g\fP \fIsize\fP] [\fB-l\fP | \fB-r\fP] [\fB-m\fP
\fIsize\fP] [\fB-S\fP \fP\fIsep\fP] [\fB-0HiqVvx\fP]

\fBsamearchive\fP [\fB-a\fP | \fB-A\fP | \fB-At\fP | \fB-L\fP | \fB-Z\fP
| \fB-Zt\fP] [\fB-g\fP \fIsize\fP] [\fB-l\fP | \fB-r\fP] [\fB-m\fP
\fIsize\fP] [\fB-S\fP \fIsep\fP] [\fB-0HiqVv\fP] \fIdir1 dir2\fP [...]
.SH DESCRIPTION

These programs reads a list of filenames (one filename per line) from
stdin and output the identical files on stdin.
\fPsamearchive\fP is written for the special case where each directory
acts as an archive of backup.
The output will only contain filename pairs that have the same relative
path from the archive base.
Therefor the output of \fPsamearchive\fP will be a subset of
\fPsamefile\fP

The output exist out of six fields: the size in bytes, two filenames
(with identical contence), the character = if the two files are on the
same device, X otherwise, and the link counts of the two files.
The output is sorted in reverse order by size as the primary key and a
secondary key that depends on the user input.
.SH OPTIONS

.IP \fB-0\fP
Indicates that the input list of file names is NUL terminated, for
example as generated by implementations of \fBfind\fP\fR(1)\fP that
support the \fB-print0\fP option.
Without this option, the file names are assumed to be newline
terminated.
.IP "\fB-A\fP"
Sort filenames alphabetically. (default)
.IP "\fB-At\fP"
Sort filenames cronologicly using the modification date (oldest first).
This option is not available when you've compiled the application with
the low memory profile.
This option is not available when you've compiled the application with
the low memory profile.
.IP "\fB-a\fP"
Do not sort files with same size alphabetically.
.IP "\fB-g \fIsize\fP"
Compare only files with size greater than \fIsize\fP bytes.
(Default is 0.)
.IP \fB-H\fp
Print human friendly statistic when at verbose level 2
.IP \fB-i\fP
Allow files with the same device/i-node pair to be added to the
binary tree.
This might be useful if output will be fed into some other program.
.IP \fB-L\fP
Sort filenames in reversed natural order using the number of times the
file was hard linked.
.IP \fB-l\fP
Do not report whether identical files are hard linked.
This option reverses the effects of the \fB-r\fP option.
.IP "\fB-m \fIsize\fP"
Compare only files with size less or equal than \fIsize\fP bytes.
Default is 0 which indicates there is no limit.
.IP \fB-q\fP
This option keep the information you are recieved during the processes
to a minimum. (Verbose level 0)
.IP \fB-r\fP
Report whether identical files are hard linked.
The separator string followed by the [bracketed] link count is appended
to each name pair if they are hard links created with
\fBln\fP\fR(1)\fP.
This option is incompatible with the \fB-l\fP option.
Note that this kind of output has only four fields and will appear
unsorted before the actual output of \fBsamefile\fP.
.IP "\fB-S \fIsep\fP"
Use string \fIsep\fP as the output field separator, defaults to a tab
character.
Useful if filenames contain tab characters and output must be processed
by another program, say \fBawk\fP\fR(1)\fP.
.IP \fB-V\fP
Print the version information and exit.
.IP \fB-v\fP
This option increases the amount of information you recieve while
running \fBsamefile\fP.
At level 0 you will just see the error messages.
At level 1 you will see warning messages indicating that \fBsamefile\fP
coudn't do something.
And at level 2 you will recieve information about the stages that
\fBsamefile\fP enters and some statistic when \fBsamefile\fP finishes.
Defaults to verbose level 1.
.IP \fB-x\fP
By default the program will print just 1 x n lines for each set of
matches, but when this option is used the program will print m x n
lines for each set of matches.
(i.e. when using the option \fB-i\fP and two files match and on is hard
 linked twice and the other is hard linked three time then you will get
 6 lines instead of just 2 or 3.)
.IP "\fB-Z\fP"
Sort filenames in reversed alphabetical order.
.IP "\fB-Zt\fP"
Sort filenames in reversed cronological order using the modification
date (youngest first).
This option is not available when you've compiled the application with
the low memory profile.
This option is not available when you've compiled the application with
the low memory profile.
.SH INTERNALS

These programs uses two stages to give optimum performance.

In the first stage, all non-plain files are skipped (directories,
devices, FIFOs, sockets, symbolic links) as well as files for which
\fBstat\fP\fR(2)\fP fails and files that have a size less than or equal
to \fIsize\fP or greater than \fIsize\fP.

When the memory is full, \fBsamefile\fP will try to store a part of the
filenames temporarily in \fI/tmp/samefile/<pid>\fP.
When \fBsamefile\fP is not able to do this it will rais the minimum size
and removes paths from the memory accordingly.

In the second stage the filenames that are hard linked are reported,
assuming option \fB-r\fP was passed to the program.
And the files are compared and identical filenames are reported after
this.

For any i-node only one filename will be added
(unless \fB-i\fP was requested.)

For each two i-nodes that match n lines will be printed that shows the
first filename of the first i-node matched against all the filenames of
the second i-node.
Note however, that because only the first filename per i-node gets into
the second stage, the output for a group of identical files with
different i-node numbers is also minimized.

Suppose you have six identical files of size 100 in an i-node group
consisting of the three i-nodes with numbers 10, 20 and 30 (the term
'i-node group' has nothing to do with the i-node group notion of some
file systems - it merely refers to a set of i-nodes addressing files
with identical contents):

.nf
% ls -i
   10 file1     20 file4     30 file6
   10 file2     20 file5
   10 file3
% ls | samefile
100     file1   file4   =       3       2
100     file1   file6   =       3       1
.fi

The sum of the sizes in the first column is the amount of disk space you
could gain by making all 6 files links to only one file or remove all
but one of the files.
To be precise, disk space is allocated in blocks - you will probably
gain two blocks here, rather than 200 bytes.
Note that it is not enough to just remove file4 and file6
(you would gain only 100 bytes because file5 still exists.)
The proper way is to use the \fB-i\fP option. The output will look
like:

.nf
100     file1   file4   =       3       2
100     file1   file5   =       3       2
100     file1   file6   =       3       1
.fi

Removing all files listed in the third field will leave only file1.
Making all files hard links to file1 is easy.
If the fourth field is a ``='' do a forced hard link.
If you need to know about \fIall\fP combinations of identical files,
then you use both the \fB-i\fP and \fB-x\fP options.
This produces:

.nf
% ls | samefile -ix
100     file1   file4   =       3       2
100     file1   file5   =       3       2
100     file2   file4   =       3       2
100     file2   file5   =       3       2
100     file3   file4   =       3       2
100     file3   file5   =       3       2
100     file1   file6   =       3       1
100     file2   file6   =       3       1
100     file3   file6   =       3       1
100     file4   file6   =       2       1
100     file5   file6   =       2       1
.fi
.SH FILES

.IP \fI/tmp/samefile/<pid>\fP

When the list is to large to fit in to the memory, \fPsamefile\fP tries 
to temporarily store the path on the disk by creaeting files within the
directory \fI/tmp/samefile/<pid>\fP
.IP \fI/tmp/samearchive/<pid>\fP

When the list is to large to fit in to the memory, \fPsamearchive\fP
tries to temporarily store the path on the disk by creaeting files
within the directory \fI/tmp/samefile/<pid>\fP
.SH EXAMPLES

Find all identical files in the current working directory:

.nf
% ls | samefile -i
.fi

Find all identical files in my HOME directory and
subdirectories and also tell me if there are hard links:

.nf
% find $HOME -type f -print | samefile -r
.fi

Find all identical files in the \fI/usr\fP directory tree that are
bigger than 10000 bytes and write the result to \fI/tmp/usr\fP (that
one is for the sysadmin folks, you may want to 'amp' - put it in the
background with the ampersand & - this command because it takes a few
minutes.)

.nf
% find /usr -type f -print | samefile -g 10000 > /tmp/usr
.fi

Find all identical files with in the system archives that live within
the current working directory:
.nf

% find /path/to/backup/system-* | samearchive system-*
.fi

.SH DIAGNOSTICS

\fBinaccessible:\fP \fIpath\fP
This is probably due to a 'permission denied' error on files or
directories within the given \fIpath\fP for which you have no read
permission.

\fBunreadable:\fP \fIpath\fP
The file could be opend for reading jet failed while reading.
You shouldn't encounter such a warnings but if you do, and recieve more
than a few, this could be very well due to failing hard disk.

\fP<file.cpp>:<line>\fP \fImessage\fP
You can encounter such a errors when you've compiled the port with
debugging information.
Please report such messages to the author with some relevant information
about how to reproduce this bug.

\fBmemory full\fP: written \fIamount\fP path to disk
The memory was full and a number of paths where temporarily written to
disk.

\fBmemory full\fP: changed minimum file size to \fInumber\fP
The memory was full and the program coudn't temporarily write paths to
disk, so it raised the minimum file size to the given \fInumber\fP.
At a later time you could rerun the program using the option \fB-m\fP to
check that paths that where skipped and going to be skipped as a
result.

\fBmemory full\fP: aborting... to manny files with the same size
There were just to manny files with the same size to fit in to memory
from this point on.
Try to split the list up and then run the program multiple times.
.SH "SEE ALSO"

.BR samearchive-lite (1)
.BR sameln (1)
.BR samesame (1)
.BR find (1)
.BR ls (1)
.SH NOTES

Input filenames must not have leading or trailing white space unless the
white space is part of the filename.
.SH HISTOR

\fIsamefile\fP was first written by Jens Schweikhardt in 1996.
It was later rewritten by Alex de kruijff in 2009 in order to improve
the performace.
In addition the program now was able to handle memory allocation
problems due to large list and gained some addition options.
.SH BUGS

The list is not sorted properly when using the option \fB-x\fP.
This is not a bug but a feature. Proper sorting would either consume
vast amounts of memory or time.
The sorting options are there just to controle the output.
(i.e. use \fB-Zt\fP if you intent to link with the file that was the
 most recently modified. You will find that file on the left.)
.SH AUTHOR

Alex de Kruijff

